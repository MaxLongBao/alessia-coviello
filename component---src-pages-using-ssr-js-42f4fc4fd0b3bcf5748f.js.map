{"version":3,"file":"component---src-pages-using-ssr-js-42f4fc4fd0b3bcf5748f.js","mappings":"6LAgBA,MAZeA,IAAmB,IAAlB,SAAEC,GAAUD,EAE1B,OADAE,QAAQC,IAAIF,GAEVG,EAAAA,cAAA,OAAKC,UAAU,UACbD,EAAAA,cAAA,UAAIA,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAI,SACjBH,EAAAA,cAAA,UAAIA,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAI,aACjBH,EAAAA,cAAA,UAAIA,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAI,sBACjBH,EAAAA,cAAA,UAAIA,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAI,aACb,ECsBV,MAtBeP,IAA6B,IAA5B,SAAEC,EAAQ,SAAEO,GAAUR,EAEpC,OACEI,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,WACEA,EAAAA,cAACK,EAAM,CAACR,SAAUA,IAClBG,EAAAA,cAAA,YAAOI,GACPJ,EAAAA,cAAA,UACEM,MAAO,CACLC,UAAU,iBACVC,SAAS,mBAEZ,MACI,IAAIC,MAAOC,cAAc,gBAC5B,IACAV,EAAAA,cAAA,KAAGW,KAAK,4BAA2B,YAGtC,C,+CCiBP,IArCA,SAAYf,GAAoC,IAADgB,EAAAC,EAAA,IAAlC,YAAEC,EAAW,MAAEC,EAAK,SAAEX,GAAUR,EAC3C,MAAM,KAAEoB,IAASC,EAAAA,EAAAA,gBAAe,YAc1BC,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAgC,QAApBR,EAAGI,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBG,MAExC,OACEf,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQoB,EAAkBL,EAAK,MAAMK,EAAiBL,GACtDf,EAAAA,cAAA,QAAMqB,KAAK,cAAcC,QAASJ,IAClClB,EAAAA,cAAA,QAAMuB,SAAS,WAAWD,QAASP,IACnCf,EAAAA,cAAA,QAAMuB,SAAS,iBAAiBD,QAASJ,IACzClB,EAAAA,cAAA,QAAMuB,SAAS,UAAUD,QAAQ,YACjCtB,EAAAA,cAAA,QAAMqB,KAAK,eAAeC,QAAQ,YAClCtB,EAAAA,cAAA,QAAMqB,KAAK,kBAAkBC,SAA0B,QAAjBT,EAAAG,EAAKG,oBAAY,IAAAN,OAAA,EAAjBA,EAAmBW,SAAM,KAC/DxB,EAAAA,cAAA,QAAMqB,KAAK,gBAAgBC,QAASP,IACpCf,EAAAA,cAAA,QAAMqB,KAAK,sBAAsBC,QAASJ,IAC1ClB,EAAAA,cAAA,QAAMyB,IAAI,aAAad,KAAK,iCAC5BX,EAAAA,cAAA,QAAMyB,IAAI,aAAad,KAAK,8BAC5BX,EAAAA,cAAA,QAAMW,KAAK,sGAAsGc,IAAI,eACpHrB,EAGP,C,6GCvCA,MA4BasB,EAAOA,IAAM1B,EAAAA,cAAC2B,EAAAA,EAAG,CAACZ,MAAM,cAErC,UA9BiBnB,IAAqB,IAApB,WAAEgC,GAAYhC,EAC9B,OACEI,EAAAA,cAAC6B,EAAAA,EAAM,KACL7B,EAAAA,cAAA,UAAI,gBACWA,EAAAA,cAAA,SAAG,yBAElBA,EAAAA,cAAA,SAAG,mHAE4C,IAC7CA,EAAAA,cAAA,YAAM,yCAA4C,KAEpDA,EAAAA,cAAA,OACEM,MAAO,CAAEwB,MAAO,QAASC,aAAc,wBACvCC,IAAI,eACJC,IAAKL,EAAWM,UAElBlC,EAAAA,cAAA,SAAG,kCAC+B,IAChCA,EAAAA,cAAA,KAAGW,KAAK,oFAAmF,6CAEvF,KAGNX,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C","sources":["webpack://gatsby-starter-default/./src/components/navbar/navbar.jsx","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/using-ssr.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport \"./navbar.css\";\n\nconst Navbar = ({ location }) => {\n  console.log(location)\n  return (\n    <div className=\"navbar\">\n      <h3><Link to='/'>Home</Link></h3>\n      <h3><Link to='/'>Chi sono</Link></h3>\n      <h3><Link to='/'>Di cosa mi occupo</Link></h3>\n      <h3><Link to='/'>Contatti</Link></h3>\n    </div>\n  );\n}\n\nexport default Navbar;","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport Navbar from \"../components/navbar/navbar\"\n\nimport \"./layout.css\"\n\nconst Layout = ({ location, children }) => {\n\n  return (\n    <>\n      <div>\n        <Navbar location={location} />\n        <main>{children}</main>\n        <footer\n          style={{\n            marginTop: `var(--space-5)`,\n            fontSize: `var(--font-sm)`,\n          }}\n        >\n          Â© {new Date().getFullYear()} &middot; Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n      <link href=\"https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@100;200;300;400;500;600;700&display=swap\" rel=\"stylesheet\" />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst UsingSSR = ({ serverData }) => {\n  return (\n    <Layout>\n      <h1>\n        This page is <b>rendered server-side</b>\n      </h1>\n      <p>\n        This page is rendered server side every time the page is requested.\n        Reload it to see a(nother) random photo from{\" \"}\n        <code>dog.ceo/api/breed/shiba/images/random</code>:\n      </p>\n      <img\n        style={{ width: \"320px\", borderRadius: \"var(--border-radius)\" }}\n        alt=\"A random dog\"\n        src={serverData.message}\n      />\n      <p>\n        To learn more, head over to our{\" \"}\n        <a href=\"https://www.gatsbyjs.com/docs/reference/rendering-options/server-side-rendering/\">\n          documentation about Server Side Rendering\n        </a>\n        .\n      </p>\n      <Link to=\"/\">Go back to the homepage</Link>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"Using SSR\" />\n\nexport default UsingSSR\n\nexport async function getServerData() {\n  try {\n    const res = await fetch(`https://dog.ceo/api/breed/shiba/images/random`)\n    if (!res.ok) {\n      throw new Error(`Response failed`)\n    }\n    return {\n      props: await res.json(),\n    }\n  } catch (error) {\n    return {\n      status: 500,\n      headers: {},\n      props: {},\n    }\n  }\n}\n"],"names":["_ref","location","console","log","React","className","Link","to","children","Navbar","style","marginTop","fontSize","Date","getFullYear","href","_site$siteMetadata","_site$siteMetadata2","description","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","author","rel","Head","Seo","serverData","Layout","width","borderRadius","alt","src","message"],"sourceRoot":""}